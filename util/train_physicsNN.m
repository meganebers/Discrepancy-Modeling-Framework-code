% Solve an Input-Output Time-Series Problem with a Time Delay Neural Network
% Script generated by Neural Time Series app.
% Created 01-Aug-2021 17:20:24
%
% This script assumes these variables are defined:
%
%   XX - input time series.
%   EE - target time series.

function net = train_errorNN(input,target,inputDelays,hiddenLayerSize)

[rowIN,colIN] = size(input);
[rowTAR,colTAR] = size(target);

if rowIN > colIN
    X = tonndata(input,false,false);
else
    X = tonndata(input,true,false);
end

if rowTAR > colTAR
    T = tonndata(target,false,false);
else
    T = tonndata(target,true,false);
end

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainbr';  % Bayesian Regularization backpropagation.

% Create a Time Delay Network
% inputDelays = 1:10;
% hiddenLayerSize = 10;
%net = timedelaynet(inputDelays,hiddenLayerSize,trainFcn);
net = feedforwardnet(hiddenLayerSize,'trainlm');

% Prepare the Data for Training and Simulation
% The function PREPARETS prepares timeseries data for a particular network,
% shifting time by the minimum amount to fill input states and layer
% states. Using PREPARETS allows you to keep your original time series data
% unchanged, while easily customizing it for networks with differing
% numbers of delays, with open loop or closed loop feedback modes.
[x,xi,ai,t] = preparets(net,X,T);

% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;

% Train the Network
[net,tr] = train(net,x,t);

% Test the Network
y = net(x);
figure, plotresponse(t,y)
e = gsubtract(t,y);
figure, ploterrcorr(e)
performance = perform(net,t,y)

